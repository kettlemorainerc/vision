import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

import java.util.regex.Pattern

plugins {
    id 'java'
    id 'application'
    id "edu.wpi.first.GradleRIO" version "${wpiVersion}" // WPI version comes from gradle.properties
}

def platform = DefaultNativePlatform.currentOperatingSystem.toFamilyName()

repositories {
    mavenCentral()
    mavenLocal()
    maven {url 'http://maven.icm.edu.pl/artifactory/repo/'}
    maven {url 'https://frcmaven.wpi.edu/artifactory/release/'}
//    maven {
//        url "https://frcmaven.wpi.edu/artifactory/release/edu/wpi/first/wpiutil/wpiutil-cpp/${wpiVersion}/wpiutil-cpp-${wpiVersion}-${platform}x86-64static.zip"
//
//    }
//    ivy {
//        url "https://frcmaven.wpi.edu/artifactory/release/edu/wpi/first/wpiutil/wpiutil-cpp/${wpiVersion}/wpiutil-cpp-${wpiVersion}-${platform}x86-64static.zip"
//
//    }
}

//jar {
//    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest("org.usfirst.frc.team2077.video.Main")
//}

def targetConfiguration = "aimingFEThree2020";
targetCompatibility = (JavaVersion.VERSION_11)
sourceCompatibility = (JavaVersion.VERSION_11)
def extractDir = "$buildDir${File.separator}tmp${File.separator}jniExtractDir"

task copyVideoData(type: Copy) {
    from("VIDEO_DATA") {
        include "*"
    }
    into "${extractDir}${File.separator}VIDEO_DATA"
}

task saveVideoData(type: Copy) {
    from("${extractDir}${File.separator}VIDEO_DATA") {
        include '*'
    }
    into "VIDEO_DATA"
}
// all execs must copy, then save video data, must have a workingDir of the *.so/a s and use targetConfiguration as their args to main
tasks.withType(JavaExec) {
    dependsOn tasks.copyVideoData
    finalizedBy(tasks.saveVideoData)
    workingDir "${extractDir}"
    argsString(targetConfiguration)
    systemProperty 'java.library.path', "${System.getProperty("java.library.path")}${File.pathSeparator}${extractDir}"
}

configurations {
    staticNative
}

dependencies {
    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)

    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'
    implementation group: 'org.freedesktop.gstreamer', name: 'gst1-java-core', version: '1.4.0'
    implementation group: 'org.freedesktop.gstreamer', name: 'gst1-java-swing', version: '0.9.0'
//    implementation group: 'org.opencv', name: 'openCVLibrary', version: '3.4.0'
    implementation group: 'org.openpnp', name: 'opencv', version: '3.2.0-1'
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.6.0'

    implementation group: 'edu.wpi.first.ntcore', name: 'ntcore-java', version: wpiVersion
    implementation group: 'edu.wpi.first.ntcore', name: 'ntcore-jni', version: wpiVersion
    implementation group: 'edu.wpi.first.wpiutil', name: 'wpiutil-java', version: wpiVersion
    implementation group: 'edu.wpi.first.wpiutil', name: 'wpiutil-jni', version: wpiVersion

    staticNative group: 'edu.wpi.first.wpiutil', name: 'wpiutil-cpp', version: wpiVersion, classifier: "${platform}x86-64static", ext: 'zip'
    staticNative group: 'edu.wpi.first.ntcore', name: 'ntcore-cpp', version: wpiVersion, classifier: "${platform}x86-64static", ext: 'zip'
}

def staticNativeFiles = {
    def config = configurations.getByName("staticNative")
    def deps = config.dependencies.toArray(new Dependency[0])
    config.files(deps)
}

task extractArchivedNatives(type: Copy) {
    staticNativeFiles().each {
        from zipTree(it)
    }
    include '**/*.a'
    eachFile {
        path = name
    }
    includeEmptyDirs = false

    into extractDir
}

run {
    dependsOn tasks.extractArchivedNatives
    dependsOn tasks.build
    systemProperty 'java.library.path', "${System.getProperty("java.library.path")}${File.pathSeparator}${extractDir}"

    classpath = sourceSets.main.runtimeClasspath
    main = "org.usfirst.frc.team2077.video.Main"
}
/*
    nativeDesktopZip uri("https://frcmaven.wpi.edu/artifactory/release/edu/wpi/first/wpiutil/wpiutil-cpp/${wpiVersion}/wpiutil-cpp-${wpiVersion}-${platform}x86-64static.zip")
    nativeDesktopZip uri("https://frcmaven.wpi.edu/artifactory/release/edu/wpi/first/ntcore/ntcore-cpp/${wpiVersion}/ntcore-cpp-${wpiVersion}-${platform}x86-64static.zip" )
* */

task startNetwork(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "org.usfirst.frc.team2077.vision.NTMain"

    dependsOn(tasks.build)
}