import java.nio.file.Paths

plugins {
    id 'java'
    id 'application'
    id "edu.wpi.first.GradleRIO" version "2023.3.1"
}

def targetConfiguration = "camera";
def workingDirectory = file("$buildDir/run/")
targetCompatibility = (JavaVersion.VERSION_17)
sourceCompatibility = (JavaVersion.VERSION_17)

dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)

    implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'
    implementation group: 'org.freedesktop.gstreamer', name: 'gst1-java-core', version: '1.4.0'
    implementation group: 'org.freedesktop.gstreamer', name: 'gst1-java-swing', version: '0.9.0'
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.6.0'

    implementation group: "org.slf4j", name: "slf4j-api", version: "2.0.12"
    implementation group: "ch.qos.logback", name: "logback-classic", version: "1.4.14"
}

task copyVideoData(type: Copy) {
    from("VIDEO_DATA") {
        include "*"
    }
    into "$workingDirectory${File.separator}VIDEO_DATA"
    from("pictures") {
        include "*"
    }
    into "$workingDirectory${File.separator}pictures"

    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

task saveVideoData(type: Copy) {
    from("$buildDir${File.separator}tmp${File.separator}jniExtractDir${File.separator}VIDEO_DATA") {
        include '*'
    }
    into "VIDEO_DATA"
    from("$buildDir${File.separator}tmp${File.separator}jniExtractDir${File.separator}pictures") {
        include "*"
    }
    into "pictures"
}

tasks.withType(JavaExec) {
    dependsOn tasks.copyVideoData
    finalizedBy(tasks.saveVideoData)
    workingDir workingDirectory
    argsString(targetConfiguration)
    
    def components = [
            System.getProperty("java.library.path"),
            "$buildDir${File.separator}tmp${File.separator}jniExtractDir",
            Paths.get(projectDir.toString(), "opencv", "standard", "build", "lib", "Debug").toString()
    ]
    systemProperty 'java.library.path', components.join(File.pathSeparator)
}

repositories {
    maven {
        url 'file:///C:/Users/Public/wpilib/2023/maven'
    }
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://maven.icm.edu.pl/artifactory/repo/'
    }
}

def files = [
        "C:\\Users\\Public\\wpilib\\2023\\maven\\edu\\wpi\\first\\ntcore\\ntcore-cpp\\2023.3.2\\ntcore-cpp-2023.3.2-windowsx86-64.zip",
        "C:\\Users\\Public\\wpilib\\2023\\maven\\edu\\wpi\\first\\wpinet\\wpinet-cpp\\2023.3.2\\wpinet-cpp-2023.3.2-windowsx86-64.zip",
        "C:\\Users\\Public\\wpilib\\2023\\maven\\edu\\wpi\\first\\wpiutil\\wpiutil-cpp\\2023.3.2\\wpiutil-cpp-2023.3.2-windowsx86-64.zip",
        "C:\\Users\\Public\\wpilib\\2023\\maven\\edu\\wpi\\first\\thirdparty\\frc2023\\opencv\\opencv-cpp\\4.6.0-4\\opencv-cpp-4.6.0-4-windowsx86-64.zip"
]

task extractDeps {
    doLast {
        copy {
            files.each {
                from zipTree(it).asCollection()
            }

            include "**/*.lib"
            include "**/*.dll"

            into workingDirectory
        }
    }
}

run {
    dependsOn tasks.extractDeps
    dependsOn tasks.build

    classpath = sourceSets.main.runtimeClasspath
    main = "org.usfirst.frc.team2077.startup.Startup"
}

task startNetwork(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "org.usfirst.frc.team2077.vision.NTMain"

    dependsOn(tasks.build)
}