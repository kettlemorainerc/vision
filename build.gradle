import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

import java.util.regex.Pattern

plugins {
    id 'java'
    id 'application'
    id "edu.wpi.first.GradleRIO" version "${wpiVersion}" // WPI version comes from gradle.properties
}

def platform = DefaultNativePlatform.currentOperatingSystem.toFamilyName()

repositories {
    mavenCentral()
    mavenLocal()
    maven {url 'http://maven.icm.edu.pl/artifactory/repo/'}
    maven {url 'https://frcmaven.wpi.edu/artifactory/release/'}
}

// I'm leaving this here in case we for some reason want to run this as a jar somewhere. They'll still need a bunch of the natives
//jar {
//    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest("org.usfirst.frc.team2077.video.Main")
//}

def targetConfiguration = "aimingFEThree2020";
targetCompatibility = (JavaVersion.VERSION_11)
sourceCompatibility = (JavaVersion.VERSION_11)
def extractDir = "$buildDir${File.separator}tmp${File.separator}natives"

task copyVideoData(type: Copy) {
    from("VIDEO_DATA") {
        include "*"
    }
    into "${extractDir}${File.separator}VIDEO_DATA"
}

task saveVideoData(type: Copy) {
    from("${extractDir}${File.separator}VIDEO_DATA") {
        include '*'
    }
    into "VIDEO_DATA"
}

configurations {
    natives
}

dependencies {
    implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'
    implementation group: 'org.freedesktop.gstreamer', name: 'gst1-java-core', version: '1.4.0'
    implementation group: 'org.freedesktop.gstreamer', name: 'gst1-java-swing', version: '0.9.0'
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.6.0'

    // You can (maybe?) figure out the format for the following deps from this url: https://frcmaven.wpi.edu/artifactory/release/edu/wpi/first/
    implementation group: 'edu.wpi.first.wpilibj', name: 'wpilibj-java', version: wpiVersion

    def javaAndNatives = { String target, String packageName = target, String version = wpiVersion ->
        implementation group: "edu.wpi.first.${packageName}", name: "$target-java", version: version
        natives group: "edu.wpi.first.${packageName}", name: "$target-jni", version: version, classifier: "${platform}x86-64"
        natives group: "edu.wpi.first.${packageName}", name: "$target-cpp", version: version, classifier: "${platform}x86-64static", ext: "zip"
    }

    javaAndNatives "ntcore"
    javaAndNatives "wpiutil"
    javaAndNatives "opencv", "thirdparty.frc${opencvYear}.opencv", opencvVersion
}

// Retrieve all deps from the 'natives' configuration we created earlier in the 'configurations' closure
def nativesFiles = {
    def config = configurations.getByName("natives")
    def deps = config.dependencies.toArray(new Dependency[0])
    config.files(deps)
}
// Map the downloaded 'natives' deps to their native files, and flat map them into a directory
task extractNatives(type: Copy) {
    nativesFiles().each {
        from zipTree(it)
    }
    include '**/*.a'
    include "**/*.so"
    eachFile {
        path = name
    }
    includeEmptyDirs = false

    into extractDir
}
/**
 * Executions of this application need to do a few things
 * <ul>
 *     <li>Extract necessary native libraries to defined extraction directory</li>
 *     <li>Add the previously reference extraction directory to java.library.path so that runtime can see the natives</li>
 *     <li>Use our currently defined targetConfiguration for vision. see src/main/resources/<targetConfiguration>.properties</li>
 * </ul>
 */
tasks.withType(JavaExec) {
    dependsOn tasks.extractNatives
    systemProperty 'java.library.path', "${System.getProperty("java.library.path")}${File.pathSeparator}${extractDir}"

    argsString(targetConfiguration)
}

run {
    main = "org.usfirst.frc.team2077.video.Main"
}

task startNetwork(type: JavaExec) {
    main = "org.usfirst.frc.team2077.vision.NTMain"
}